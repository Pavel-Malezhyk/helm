apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: {{ .Values.global.capi.minReplicas }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/capi-configmap.yaml") . | sha256sum }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9100"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      terminationGracePeriodSeconds: 300
      initContainers:
        - name: init-wait
          image: alpine
          command: ["sh", "-c", "until {{- if .Values.global.db.bouncer }} nc -zvw1 pgbouncer-service 5432 && {{- end }} {{- if not .Values.global.db.internal }} nc -zvw1 ${POSTGRES_DBHOST} ${POSTGRES_DBPORT} &&  {{- else }} nc -zvw1 postgresql 5432 && {{- end }} {{- if .Values.global.mq.internal }} nc -zvw1 rabbit-service 5672 && {{- else }}  nc -zvw1  ${MQ_HOST} ${MQ_PORT} && {{- end }} {{- if .Values.global.elasticsearch.internal }} nc -zvw1 elasticsearch-service 9200 {{- else }} nc -zvw1 `echo ${ELASTICSEARCH_HOST} | sed -e 's|http.://||g'` 443 {{- end }}; do echo waiting for dependences; sleep 2; done;"]
          env:
            {{- if eq .Values.global.secretalreadyexist true }}
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: mq_host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: mq_port
            - name: ELASTICSEARCH_HOST
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: elasticsearch_host
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: postgres_dbhost
                {{- end }}
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: postgres_dbport
            {{- else}}
            - name: MQ_HOST
              value: {{ .Values.global.mq.host }}
            - name: MQ_PORT
              value: {{ .Values.global.mq.port | quote }}
            - name: ELASTICSEARCH_HOST
              value: {{ .Values.global.elasticsearch.host }}
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              value: {{ .Values.global.db.dbhost }}
                {{- end }}
            - name: POSTGRES_DBPORT
              value: {{ .Values.global.db.dbport | quote }}
            {{- end }}
        - name: init-wait-rmq
          image: alpine
          command: ['sh']
          args:
            - "-c"
            - |
              until wget -O - -q --header "Authorization: Basic `echo -n \"$MQ_USERNAME:$MQ_PASSWORD\" | base64`" http://{{- if .Values.global.mq.internal }}rabbit-service{{- else }}${MQ_HOST}{{- end }}:15672/api/exchanges/%2Fconveyor/ | grep -qF "conf_agent_direct"; do echo "waiting for exchanges to be ready..."; sleep 2; done
          env:
            {{- if eq .Values.global.secretalreadyexist true }}
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: mq_host
            - name: MQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: mq_username
            - name: MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: mq_password
            {{- else}}
            - name: MQ_HOST
              value: {{ .Values.global.mq.host }}
            - name: MQ_USERNAME
              value: {{ .Values.global.mq.username }}
            - name: MQ_PASSWORD
              value: {{ .Values.global.mq.password }}
            {{- end }}
      containers:
        - name: {{ .Values.appName }}
          imagePullPolicy: {{ .Values.image.imagePullPolicy }}
          image: "{{ .Values.image.registry }}/{{ .Values.global.repotype }}{{ .Values.image.repository }}:{{ .Values.global.capi.tag }}"
          env:
          {{- if .Values.global.debug }}
          - name: ERL_CRASH_DUMP
            value: "/dev/stderr"
          {{- end }}
          - name: NODE_COOKIE
            value: {{ .Values.appName }}-{{ .Release.Namespace }}
          - name: RELX_REPLACE_OS_VARS
            value: "true"
          - name: IPNODEDOMAIN
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          {{- if eq .Values.global.secretalreadyexist true }}
          - name: REDIS_HOST
            valueFrom:
              secretKeyRef:
                name: secrets
                key: redis_host
          - name: REDIS_PORT
            valueFrom:
              secretKeyRef:
                name: secrets
                key: redis_port
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: secrets
                key: redis_password
          - name: MQ_HOST
            valueFrom:
              secretKeyRef:
                name: secrets
                key: mq_host
          - name: MQ_PORT
            valueFrom:
              secretKeyRef:
                name: secrets
                key: mq_port
          - name: MQ_VHOST
            valueFrom:
              secretKeyRef:
                name: secrets
                key: mq_vhost
          - name: MQ_USERNAME
            valueFrom:
              secretKeyRef:
                name: secrets
                key: mq_username
          - name: MQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: secrets
                key: mq_password
          - name: CAPI_API_SECRET
            valueFrom:
              secretKeyRef:
                name: secrets
                key: capi_api_secret
          - name: CAPI_AUTH_HASH
            valueFrom:
              secretKeyRef:
                name: secrets
                key: capi_auth_hash
          - name: MERCHANT_LOGIN
            valueFrom:
              secretKeyRef:
                name: secrets
                key: merchant_login
          - name: MERCHANT_SECRET
            valueFrom:
              secretKeyRef:
                name: secrets
                key: merchant_secret
          - name: ELASTICSEARCH_HOST
            valueFrom:
              secretKeyRef:
                name: secrets
                key: elasticsearch_host
          - name: ELASTICSEARCH_PORT
            valueFrom:
              secretKeyRef:
                name: secrets
                key: elasticsearch_port
          - name: POSTGRES_DBHOST
            {{- if .Values.global.db.bouncer }}
            value: "pgbouncer-service"
            {{- else }}
            valueFrom:
              secretKeyRef:
                name: secrets
                key: postgres_dbhost
            {{- end }}
          - name: POSTGRES_DBUSER
            valueFrom:
              secretKeyRef:
                name: secrets
                key: postgres_dbuser
          - name: POSTGRES_DBPWD
            valueFrom:
              secretKeyRef:
                name: secrets
                key: postgres_dbpwd
          - name: POSTGRES_DBPORT
            valueFrom:
              secretKeyRef:
                name: secrets
                key: postgres_dbport
          {{- else}}
          - name: REDIS_HOST
            value: {{ .Values.global.redis.host }}
          - name: REDIS_PORT
            value: {{ .Values.global.redis.port | quote  }}
          - name: REDIS_PASSWORD
            value: {{ .Values.global.redis.password }}
          - name: MQ_HOST
            value: {{ .Values.global.mq.host }}
          - name: MQ_PORT
            value: {{ .Values.global.mq.port | quote }}
          - name: MQ_VHOST
            value: {{ .Values.global.mq.vhost }}
          - name: MQ_USERNAME
            value: {{ .Values.global.mq.username }}
          - name: MQ_PASSWORD
            value: {{ .Values.global.mq.password }}
          - name: CAPI_API_SECRET
            value: {{ .Values.global.capi.capi_api_secret }}
          - name: CAPI_AUTH_HASH
            value: {{ .Values.global.capi.capi_auth_hash }}
          - name: MERCHANT_LOGIN
            value: {{ .Values.global.merchant.merchant_login }}
          - name: MERCHANT_SECRET
            value: {{ .Values.global.merchant.merchant_secret }}
          - name: ELASTICSEARCH_HOST
            value: {{ .Values.global.elasticsearch.host }}
          - name: ELASTICSEARCH_PORT
            value: {{ .Values.global.elasticsearch.port | quote }}
          - name: POSTGRES_DBHOST
            {{- if .Values.global.db.bouncer }}
            value: "pgbouncer-service"
            {{- else }}
            value: {{ .Values.global.db.dbhost }}
            {{- end }}
          - name: POSTGRES_DBUSER
            value: {{ .Values.global.db.dbuser }}
          - name: POSTGRES_DBPWD
            value: {{ .Values.global.db.dbpwd }}
          - name: POSTGRES_DBPORT
            value: {{ .Values.global.db.dbport | quote }}
          {{- end }}
          ports:
          - containerPort: {{ .Values.containers.containerPort }}
          - containerPort: 8585
          lifecycle:
            preStop:
              exec:
                command: ["/ebsmnt/erlang/capi/bin/capi","stop"]
          volumeMounts:
            - name: {{ .Values.appName }}config
              mountPath: /ebsmnt/conf/capi.config
              subPath: capi.config
            - name: corezoid-license
              mountPath: /ebsmnt/certs
          resources:
            {{ .Values.global.capi.resources | toYaml | indent 12 | trim }}
          livenessProbe:
            exec:
              command:
              - bash
              - -ec
              - |
                ulimit -n 1024
                exec /usr/bin/capi liveness
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - bash
              - -ec
              - |
                ulimit -n 1024
                exec /usr/bin/capi readiness
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              add: ["IPC_LOCK"]
      {{- if not  (eq .Values.global.repotype "public") }}
      imagePullSecrets:
        - name: corezoid-secret
      {{- end }}
      volumes:
        - name: {{ .Values.appName }}config
          configMap:
            name: {{ .Values.appName }}-config
        - name: corezoid-license
          secret:
            secretName: license-share-new
