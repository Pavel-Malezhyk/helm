apiVersion: v1
data:
  usercode.config: |
    [
      {cce, [
        {cce_id, <<"cce-{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},

        {light_cnode_threads_count, 1}, %% number of threads for light nodes
        {heavy_cnode_threads_count, 1}, %% number of threads for heavy nodes

        {light_cnode_watchdog_wakeup,  1000}, %% time when watchdog wakes up and kills "longlive" codes in light nodes
        {heavy_cnode_watchdog_wakeup, 800}, %% time when watchdog wakes up and kills "longlive" codes in heavy nodes

        {cnode_max_exec_code_time, 1000}, %% max time for each execution of code, kill process after this time

        {cnode_threshold_to_writing_log, 0.1}, %% max threshold to write it to log
        {max_exec_time_to_change_cnode_type, 0.1}, %% max exec piece of codes to change them to heavy node

        {show_err_resps, false},     %% If true, then more logs are displayed
        {show_ok_resps, false},      %% If true, then more logs are displayed

        {cnode_min_av_ram_to_clean_isolates, 2621440}, %% // 25% from 10 Gb in Kb
        {cnode_max_used_per_isolate, 5}, %% // in Mb

        % postgresql settings
        {pgsql, [
          {{- if eq .Values.global.db.internal false }}
            {host, "{{ .Values.global.db.dbhost }}"},
          {{- else }}
            {host, "pgbouncer-service"},
          {{- end }}
            {user, "{{ .Values.global.db.dbuser }}"},
            {dbname, "cce"},
            {password, "{{ .Values.global.db.dbpwd }}"},
            {start_size, 1},
            {min_size, 1},
            {max_size, 5}
        ]},

        % postgresql statistics settings
        {pgsql_statistics, [
          {{- if eq .Values.global.db.internal false }}
            {host, "{{ .Values.global.db.dbhost }}"},
          {{- else }}
            {host, "pgbouncer-service"},
          {{- end }}
            {user, "{{ .Values.global.db.dbuser }}"},
            {dbname, "conveyor"},
            {password, "{{ .Values.global.db.dbpwd }}"},
            {start_size, 1},
            {min_size, 1},
            {max_size, 5}
        ]},

        %% dns cache. Support multiply dnses cache
        %% name - unical name will be able to use in publish/consumer rabbitmq instead of server name
        %% dns - DNS name
        %% ns - NS name
        %% ttl - auto reload info from DNS server (in seconds)
        {dns_cache, [
            [
                {name, main},
    {{- if eq .Values.global.mq.internal false }}
                {dns, "{{ .Values.global.mq.host }}"},
    {{- else }}
                {dns, "rabbit-service"},
    {{- end }}
                {ttl, 60}
            ],
            [
                {name, name2},
      {{- if eq .Values.global.mq.internal false }}
                  {dns, "{{ .Values.global.mq.host }}"},
      {{- else }}
                  {dns, "rabbit-service"},
      {{- end }}
                  {ttl, 60}
            ],
            [
                {name, name3},
      {{- if eq .Values.global.mq.internal false }}
                  {dns, "{{ .Values.global.mq.host }}"},
      {{- else }}
                  {dns, "rabbit-service"},
      {{- end }}
                  {ttl, 60}
            ],
            [
                {name, name4},
      {{- if eq .Values.global.mq.internal false }}
                  {dns, "{{ .Values.global.mq.host }}"},
      {{- else }}
                  {dns, "rabbit-service"},
      {{- end }}
                  {ttl, 60}
            ]
        ]},

        %% Consumer packages (code compilation, receiving code, code deletion)
        {consumer_ctrl, [
            {servers, [
              [
          {{- if eq .Values.global.mq.internal false }}
                {host, '{{ .Values.global.mq.host }}' },
                {port, {{ .Values.global.mq.port }} },
                {username, <<"{{ .Values.global.mq.username }}">>},
                {password, <<"{{ .Values.global.mq.password }}">>},
          {{- else }}
                {host, 'rabbit-service'},
                {port, 5672},
                {username, <<"app-user">>},
                {password, <<"password">>},
          {{- end }}
                {vhost, <<"/conveyor">>}
              ]
            ]},
            {queues_count, 1},
            {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
            {channels_per_connection, 2},   %% Virtual connections for one connections_per_queue
            {messages_prefetch_size_per_channel, 10}    %% The number of queues within the channel
        ]},

        %% answer producer cce
        {publish_process_data, [
            {servers, [
              [
          {{- if eq .Values.global.mq.internal false }}
                {host, '{{ .Values.global.mq.host }}' },
                {port, {{ .Values.global.mq.port }} },
                {username, <<"{{ .Values.global.mq.username }}">>},
                {password, <<"{{ .Values.global.mq.password }}">>},
          {{- else }}
                {host, 'rabbit-service'},
                {port, 5672},
                {username, <<"app-user">>},
                {password, <<"password">>},
          {{- end }}
                {vhost, <<"/conveyor">>}
              ]
            ]},
            {min_size, 10},
            {max_size, 10},
            {start_size, 10}
        ]},

        %% code processing concierge
        {consumer_process_data, [
            {servers, [
              [
          {{- if eq .Values.global.mq.internal false }}
                {host, '{{ .Values.global.mq.host }}' },
                {port, {{ .Values.global.mq.port }} },
                {username, <<"{{ .Values.global.mq.username }}">>},
                {password, <<"{{ .Values.global.mq.password }}">>},
          {{- else }}
                {host, 'rabbit-service'},
                {port, 5672},
                {username, <<"app-user">>},
                {password, <<"password">>},
          {{- end }}
                {vhost, <<"/conveyor">>}
              ]
            ]},
            {queues_count, 5},
            {connections_per_queue, 5},   %% The specified number of tcp connections will be created for each queue
            {channels_per_connection, 2},   %% Virtual connections for one connections_per_queue
            {messages_prefetch_size_per_channel, 50}    %% The number of queues within the channel
        ]},

        %% sending metrics to zabbix
        {zabbix, [
            {server, "localhost"},
            {src_host, "localhost"},
            {send_interval, 5},
            {disabled, true}
        ]}
      ]},

      %% sending metrics to zabbix
      {zabbix_sender, [
          {zabbix_host, "localhost"},
          {zabbix_port, 10051},
          {nodename, "localhost"},
          {disabled, true}
      ]},

      {lager, [
          %% What handlers to install with what arguments (wrapped by middleman)
          {handlers, [
                {lager_file_backend, [
                    {file, "log/error.log"}, {level, error}, {size, 734003200}, {date, "$D0"}, {count, 1}]},
                {lager_file_backend, [
                    {file, "log/console.log"}, {level, info}, {size, 734003200}, {date, "$D0"}, {count, 1}]}
            ]},
            %% What colors to use with what log levels
            {colored, true},
            {colors, [
              {debug,     "\e[0;38m" },
              {info,      "\e[1;37m" },
              {notice,    "\e[1;36m" },
              {warning,   "\e[1;33m" },
              {error,     "\e[1;31m" },
              {critical,  "\e[1;35m" },
              {alert,     "\e[1;44m" },
              {emergency, "\e[1;41m" }
            ]},

            %% Whether to write a crash log, and where. Undefined means no crash logger.
            {crash_log, "crash.log"},
            %% Maximum size in bytes of events in the crash log - defaults to 65536
            {crash_log_msg_size, 65536},
            %% Maximum size of the crash log in bytes, before its rotated, set
            %% to 0 to disable rotation - default is 0
            {crash_log_size, 734003200},
            %% What time to rotate the crash log - default is no time
            %% rotation. See the README for a description of this format.
            {crash_log_date, "$D0"},
            %% Number of rotated crash logs to keep, 0 means keep only the
            %% current one - default is 0
            {crash_log_count, 1},
            %% Whether to redirect error_logger messages into lager - defaults to true
            {error_logger_redirect, true},
            %% How many messages per second to allow from error_logger before we start dropping them
            {error_logger_hwm, 100},
            %% How big the gen_event mailbox can get before it is switched into sync mode
            {async_threshold, 3200},
            %% Switch back to async mode, when gen_event mailbox size decrease from `async_threshold'
            %% to async_threshold - async_threshold_window
            {async_threshold_window, 3010}
        ]
      },

      {sasl, [{sasl_error_logger, false}]}
    ].

kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-config
