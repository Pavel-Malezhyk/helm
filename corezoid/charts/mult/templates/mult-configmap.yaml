apiVersion: v1
data:
  conveyor_api_multipart.config: |
    [
      {kernel, [
        {inet_dist_listen_min, 5567},   %% for multipart cluster the minimum port that can use
        {inet_dist_listen_max, 5567}    %% for multipart cluster the maximum port that can use
      ]},

      %% ---- INDIVIDUAL PARAMETR FOR THIS WORKER -------
      {conveyor_api_multipart,
        [
          {nodes, [
            '127.0.0.1'
          ]},

          {mult_id, <<"mult-{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},                          %% personal queue for this node
          {port, 9082},
          {garb_timeout,3600000},                                   %% in ms timeout garbage collector
          {publisher_timeout,1000},                              %% timeout in ms for send packet #csv_info_data{}
          {api_throughput_tasks,7000000},                              %% limit for download tasks from api
          {max_filesize, 20000000},                            %% in byte max size to upload .csv file
          {max_filesize_scheme, 200000000},                            %% in byte max size to upload .json file with scheme
          {list_fileformat, [<<"all">>]},                %% format of file have bin  alowed to upload
          {url, "https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}/api/2/json"},%% url capi when http client send requests
          {too_many_req_wait, 1000},                                  %% time in ms wait after  capi return <<"too many requests">>
          {api_res_wait, 5000},                                    %% timeout in ms wait responce after  http_client send request

          {download_limit_request,1000},

          {login_id, "2"},
          {login_secret , <<"NE4wzHnodH9sbTeEfNaxDx23scM0ZaLS76xBiSIBhqT7EL4M3e">>},

          %%  config for file storage
          {file_storage,f3},            %% f3|s3 - f3 use file storage if s3 use amazons3

          %% f3 settings
          {file_f3,[
            {path_to_dir, "/ebsmnt_share"},   %% directory where files will be placed
            %% if true, it will check grep /ebsmnt_share/ proc/mounts, if not mounted, the application will crash.
            %% if false, there will be no checks
            {network_partition, false},
            {ttl_file, 60}             %% the lifetime of files after which they will be deleted (in seconds)
            ]
          },



          %% ---- JOINT PARAMETR  WORKER AND CAPI -------

          {main_page, "https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}"},              %% NB! this parametr MUST BE equal to the 'main_page'   in capi.config because parametr

          {cookie_name, <<"corezoid-{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},                     %% the same with api
          {api_secret, <<"{{ .Values.global.capi.capi_api_secret | default "LLuQnMnVFOnsFerDn0" }}">>},             %% the same with api


          {publish_capi_connector_request, [
        {{- if eq .Values.global.mq.internal false }}
              {host, '{{ .Values.global.mq.host }}' },
              {port, {{ .Values.global.mq.port }} },
              {username, <<"{{ .Values.global.mq.username }}">>},
              {password, <<"{{ .Values.global.mq.password }}">>},
        {{- else }}
              {host, 'rabbit-service'},
              {port, 5672},
              {username, <<"app-user">>},
              {password, <<"password">>},
        {{- end }}
              {vhost, <<"/conveyor">>},
              {queues_count, 1},
              {min_size, 2},
              {max_size, 2},
            {start_size, 2}
          ]},

        %%  need for download action
        %%    ******************************
          {publish_user_actions_request, [
        {{- if eq .Values.global.mq.internal false }}
              {host, '{{ .Values.global.mq.host }}'},
              {port, {{ .Values.global.mq.port }} },
              {username, <<"{{ .Values.global.mq.username }}">>},
              {password, <<"{{ .Values.global.mq.password }}">>},
        {{- else }}
              {host, 'rabbit-service'},
              {port, 5672},
              {username, <<"app-user">>},
              {password, <<"password">>},
        {{- end }}
              {vhost, <<"/conveyor">>},
              {queues_count, 1},
              {min_size, 2},
              {max_size, 2},
            {start_size, 2}
          ]},

          {consumer_user_actions_request, [
      {{- if eq .Values.global.mq.internal false }}
            {host, '{{ .Values.global.mq.host }}'},
            {port, {{ .Values.global.mq.port }} },
            {username, <<"{{ .Values.global.mq.username }}">>},
            {password, <<"{{ .Values.global.mq.password }}">>},
      {{- else }}
            {host, 'rabbit-service'},
            {port, 5672},
            {username, <<"app-user">>},
            {password, <<"password">>},
      {{- end }}
            {vhost, <<"/conveyor">>},
            {queues_count, 1},
            {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
            {channels_per_connection, 2},   %% Virtual connections for one connections_per_queue
            {messages_prefetch_size_per_channel, 50}    %% The number of queues within the channel
          ]},
          %%   ************end block***********
          %%    ******************************
          %% producer of settings
          {publish_settings, [
            {servers, [[
      {{- if eq .Values.global.mq.internal false }}
            {host, '{{ .Values.global.mq.host }}'},
            {port, {{ .Values.global.mq.port }} },
            {username, <<"{{ .Values.global.mq.username }}">>},
            {password, <<"{{ .Values.global.mq.password }}">>},
      {{- else }}
            {host, 'rabbit-service'},
            {port, 5672},
            {username, <<"app-user">>},
            {password, <<"password">>},
      {{- end }}
              {vhost, <<"/conveyor">>}
            ]]},
            {min_size, 1},
            {max_size, 1},
            {start_size, 1}
          ]},

          %% consumer settings
          {consumer_settings, [
            {servers, [[
        {{- if eq .Values.global.mq.internal false }}
              {host, '{{ .Values.global.mq.host }}'},
              {port, {{ .Values.global.mq.port }} },
              {username, <<"{{ .Values.global.mq.username }}">>},
              {password, <<"{{ .Values.global.mq.password }}">>},
        {{- else }}
              {host, 'rabbit-service'},
              {port, 5672},
              {username, <<"app-user">>},
              {password, <<"password">>},
        {{- end }}
              {vhost, <<"/conveyor">>}
            ]]},
            {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
            {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
            {messages_prefetch_size_per_channel, 50}    %% The number of queues within the channel
          ]},

          %% work in pair with conveyor_api worker
          %% through this queue goes tasks with loading statistics to api
          {capi_consumer, [
      {{- if eq .Values.global.mq.internal false }}
            {host, '{{ .Values.global.mq.host }}'},
            {port, {{ .Values.global.mq.port }} },
            {username, <<"{{ .Values.global.mq.username }}">>},
            {password, <<"{{ .Values.global.mq.password }}">>},
      {{- else }}
            {host, 'rabbit-service'},
            {port, 5672},
            {username, <<"app-user">>},
            {password, <<"password">>},
      {{- end }}
            {vhost, <<"/conveyor">>},
            {queues_count, 1},
            {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
            {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
            {messages_prefetch_size_per_channel, 1}    %% The number of queues within the channel
          ]},

          %% work in pair with conveyor_api worker
          %% through this queue goes tasks with loading statistics to api
          {capi_consumer, [
      {{- if eq .Values.global.mq.internal false }}
            {host, '{{ .Values.global.mq.host }}'},
            {port, {{ .Values.global.mq.port }} },
            {username, <<"{{ .Values.global.mq.username }}">>},
            {password, <<"{{ .Values.global.mq.password }}">>},
      {{- else }}
            {host, 'rabbit-service'},
            {port, 5672},
            {username, <<"app-user">>},
            {password, <<"password">>},
      {{- end }}
            {vhost, <<"/conveyor">>},
            {queues_count, 1},
            {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
            {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
            {messages_prefetch_size_per_channel, 1}    %% The number of queues within the channel
          ]}

        ]
      },

      {lager,
        [
          %% What handlers to install with what arguments (wrapped by middleman)

          {log_root, "/ebsmnt/erlang/conveyor_api_multipart/log"},

          {handlers, [
            {lager_console_backend, [{level, info}]},
            {lager_file_backend, [{file, "error.log"}, {level, error}, {size, 734003200}, {date, "$D0"}, {count, 1}]},
            {lager_file_backend, [{file, "console.log"}, {level, info}, {size, 734003200}, {date, "$D0"}, {count, 1}]}
          ]},

          %% What colors to use with what log levels
          {colored, true},
          {colors, [
            {debug,     "\e[0;38m" },
            {info,      "\e[1;37m" },
            {notice,    "\e[1;36m" },
            {warning,   "\e[1;33m" },
            {error,     "\e[1;31m" },
            {critical,  "\e[1;35m" },
            {alert,     "\e[1;44m" },
            {emergency, "\e[1;41m" }
          ]},

          %% Whether to write a crash log, and where. Undefined means no crash logger.
          {crash_log, "crash.log"},
          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},
          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, 734003200},
          %% What time to rotate the crash log - default is no time
          %% rotation. See the README for a description of this format.
          {crash_log_date, "$D0"},
          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, 5},
          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true},
          %% How many messages per second to allow from error_logger before we start dropping them
          {error_logger_hwm, 50},
          %% How big the gen_event mailbox can get before it is switched into sync mode
          {async_threshold, 20},
          %% Switch back to async mode, when gen_event mailbox size decrease from 'async_threshold'
          %% to async_threshold - async_threshold_window
          {async_threshold_window, 5}
        ]
      },

      %% Client for healthcheck server
      {hcheck_sender, [
        {host, <<"hcs-service">>}, %% host of the remote healthcheck server
        {port, 5011}, %% port of the remote healthcheck server
        {node_name,  <<"mult-{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">> }, %% different for each node
        {node_type,  <<"multipart">> }, %% api | worker | multipart | http_worker | usercode | deepmemo ...
        {disabled, true}, %% true by default
        {send_interval_sec, 30}, %% by default 10 sec
        {send_system_counters, true} %% memory processes etc, false by default
      ]},

      %% SASL config
      {sasl, [
        {sasl_error_logger, {file, "log/sasl-error.log"}},
        {errlog_type, error},
        {error_logger_mf_dir, "log/sasl"},      % Log directory
        {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
        {error_logger_mf_maxfiles, 1}           % 5 files max
      ]}

    ].

kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-config
