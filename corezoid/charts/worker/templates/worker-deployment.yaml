apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  selector:
    matchLabels:
      tier: {{ .Values.appName }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: {{ .Values.global.worker.minReplicas }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/worker-configmap.yaml") . | sha256sum }}
        prometheus.io/path: /metrics
        prometheus.io/port: "9100"
        prometheus.io/scrape: "true"
      labels:
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName }}
    spec:
      terminationGracePeriodSeconds: 300
      initContainers:
        - name: init-wait
          image: alpine
          command: ["sh", "-c", "until {{- if .Values.global.db.bouncer }} nc -zvw1 pgbouncer-service 5432 && {{- end }} {{- if not .Values.global.db.internal }} nc -zvw1 ${POSTGRES_DBHOST} ${POSTGRES_DBPORT} &&  {{- else }} nc -zvw1 postgresql 5432 && {{- end }} {{- if .Values.global.mq.internal }} nc -zvw1 rabbit-service 5672 && {{- else }}  nc -zvw1  ${MQ_HOST} ${MQ_PORT} && {{- end }} {{- if .Values.global.elasticsearch.internal }} nc -zvw1 elasticsearch-service 9200 {{- else }} nc -zvw1 `echo ${ELASTICSEARCH_HOST} | sed -e 's|http.://||g'` 443 {{- end }}; do echo waiting for dependences; sleep 2; done;"]
          env:
            {{- if and ( .Values.global.mq.secretName ) ( not .Values.global.mq.internal ) }}
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_port
            {{- else }}
            - name: MQ_HOST
              value: {{ .Values.global.mq.host }}
            - name: MQ_PORT
              value: {{ .Values.global.mq.port | quote }}
            {{- end }}
            {{- if and ( .Values.global.elasticsearch.secretName ) ( not .Values.global.elasticsearch.internal )}}
            - name: ELASTICSEARCH_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.elasticsearch.secretName }}
                  key: elasticsearch_host
            {{- else }}
            - name: ELASTICSEARCH_HOST
              value: {{ .Values.global.elasticsearch.host }}
            {{- end }}
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secretName }}
                  key: postgres_dbhost
            {{- end }}
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secretName }}
                  key: postgres_dbport
        - name: init-wait-rmq
          image: alpine
          command: ['sh']
          args:
            - "-c"
            - |
              until wget -O - -q --header "Authorization: Basic `echo -n \"$MQ_USERNAME:$MQ_PASSWORD\" | base64`" http://{{- if .Values.global.mq.internal }}rabbit-service{{- else }}${MQ_HOST}{{- end }}:15672/api/exchanges/%2Fconveyor/ | grep -qF "conf_agent_direct"; do echo "waiting for exchanges to be ready..."; sleep 2; done
          env:
            {{- if and ( .Values.global.mq.secretName ) ( not .Values.global.mq.internal ) }}
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_host
            - name: MQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_username
            - name: MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_password
            {{- else}}
            - name: MQ_HOST
              value: {{ .Values.global.mq.host }}
            - name: MQ_USERNAME
              value: {{ .Values.global.mq.username }}
            - name: MQ_PASSWORD
              value: {{ .Values.global.mq.password }}
            {{- end }}
      containers:
        - name: {{ .Values.appName }}
          image: "{{ .Values.image.registry }}/{{ .Values.global.repotype}}{{ .Values.image.repository }}:{{ .Values.global.worker.tag }}"
          imagePullPolicy: Always
          env:
            - name: NODE_COOKIE
              value: {{ .Values.appName }}-{{ .Release.Namespace }}
            - name: IPNODEDOMAIN
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            {{- if .Values.global.debug }}
            - name: ERL_CRASH_DUMP
              value: "/dev/stderr"
            {{- end }}
            - name: RELX_REPLACE_OS_VARS
              value: "true"
            {{- if and ( .Values.global.redis.secretName ) ( not .Values.global.redis.internal ) }}
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secretName }}
                  key: redis_host
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secretName }}
                  key: redis_port
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.redis.secretName }}
                  key: redis_password
            {{- else }}
            - name: REDIS_HOST
              value: {{ .Values.global.redis.host }}
            - name: REDIS_PORT
              value: {{ .Values.global.redis.port | quote }}
            - name: REDIS_PASSWORD
              value: {{ .Values.global.redis.password }}
            {{- end }}
            {{- if and ( .Values.global.mq.secretName ) ( not .Values.global.mq.internal ) }}
            - name: MQ_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_host
            - name: MQ_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_port
            - name: MQ_VHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_vhost
            - name: MQ_GITCALL_VHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_gitcall_vhost
            - name: MQ_DUNDER_GITCALL_VHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_dunder_gitcall_vhost
            - name: MQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_username
            - name: MQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.mq.secretName }}
                  key: mq_password
            {{- else }}
            - name: MQ_HOST
              value: {{ .Values.global.mq.host }}
            - name: MQ_PORT
              value: {{ .Values.global.mq.port | quote }}
            - name: MQ_VHOST
              value: {{ .Values.global.mq.vhost }}
            - name: MQ_GITCALL_VHOST
              value: {{ .Values.global.gitcall.mq_vhost }}
            - name: MQ_DUNDER_GITCALL_VHOST
              value: {{ .Values.global.gitcall.dunder_mq_vhost }}
            - name: MQ_USERNAME
              value: {{ .Values.global.mq.username }}
            - name: MQ_PASSWORD
              value: {{ .Values.global.mq.password }}
            {{- end }}
            - name: POSTGRES_DBHOST
              {{- if .Values.global.db.bouncer }}
              value: "pgbouncer-service"
              {{- else }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secretName }}
                  key: postgres_dbhost
            {{- end }}
            - name: POSTGRES_DBUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secretName }}
                  key: postgres_dbuser
            - name: POSTGRES_DBPWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secretName }}
                  key: postgres_dbpwd
            - name: POSTGRES_DBPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.db.secretName }}
                  key: postgres_dbport
          ports:
          - containerPort: 9080
          lifecycle:
            preStop:
              exec:
                command: ["/ebsmnt/erlang/worker/bin/worker","stop"]
          volumeMounts:
            - name: workerconfig
              mountPath: /ebsmnt/conf/worker.config
              subPath: worker.config
            - name: corezoid-license
              mountPath: /ebsmnt/certs
          resources:
            {{ .Values.global.worker.resources | toYaml | indent 12 | trim }}
          livenessProbe:
            exec:
              command:
              - bash
              - -ec
              - |
                ulimit -n 1024
                exec /usr/bin/worker liveness
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - bash
              - -ec
              - |
                ulimit -n 1024
                exec /usr/bin/worker readiness
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              add: ["IPC_LOCK"]
      {{- if not  (eq .Values.global.repotype "public") }}
      imagePullSecrets:
        - name: corezoid-secret
      {{- end }}
      volumes:
        - name: workerconfig
          configMap:
            name: {{ .Values.appName }}-config
        - name: corezoid-license
          secret:
            secretName: license-share-new
